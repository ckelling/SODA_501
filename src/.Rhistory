colnames(county_population)[2]<-"1977"
colnames(county_population)[3]<-"1980"
colnames(county_population)[4]<-"1982"
colnames(county_population)[5]<-"1987"
colnames(county_population)[6]<-"1990"
colnames(county_population)[7]<-"1992"
colnames(county_population)[8]<-"1997"
colnames(county_population)[9]<-"2000"
colnames(county_population)[10]<-"2002"
colnames(county_population)[11]<-"2007"
colnames(county_population)[12]<-"2010"
colnames(county_population)[13]<-"2012"
county_population<-melt(county_population, id=c("fips"))
county_population<-county_population[county_population$fips>0]
county_population<-county_population[county_population$fips>0,]
county_population<-melt(county_population, id=c("fips"))
county_population <- read_csv("~/Downloads/county_population.csv", col_types = cols(fips = col_number()))
county_population <- county_population[,-(2:16)]
county_population <- county_population[,-2]
county_population <- county_population[,-(3:4)]
county_population <- county_population[,-4]
county_population <- county_population[,-(5:8)]
county_population <- county_population[,-(6:7)]
county_population <- county_population[,-7]
county_population <- county_population[,-(8:11)]
county_population <- county_population[,-(9:10)]
county_population <- county_population[,-10]
county_population <- county_population[,-(11:14)]
county_population <- county_population[,-(12:16)]
county_population <- county_population[,-13]
county_population <- county_population[,-(14:15)]
county_population<-county_population[county_population$fips>0,]
county_population<-melt(county_population, id=c("fips"))
write.csv(county_population, "county_population.csv")
write.csv(county_population, "county_population_1.csv")
write.csv(county_population, "~/Downloads/county_population_1.csv")
setwd("~/Box Sync/2018 Spring/SoDA 501/Exercise 3") ## set working directory
library(tidyr)
data <- read.csv("CentreCountyPrecinctResults2016GeneralElection.txt") ## read in data
head(data)
tbl_df(data) ## convert data into tbl class
library(tidyr)
subset <- select(data, PrecNo, PrecName, Party, Contest, Candidate, Count)
subset <- select(data, PrecNo, PrecName, Party, Contest, Candidate, Count)
help(select)
??select
library(tidyr)
subset <- select(data, PrecNo, PrecName, Party, Contest, Candidate, Count)
library(dplyr)
totalVote <- filter(subset, Contest == "BALLOTS CAST - TOTAL")# split
subset <- select(data, PrecNo, PrecName, Party, Contest, Candidate, Count)
glimpse(subset)
totalVote <- filter(subset, Contest == "BALLOTS CAST - TOTAL")# split
head(totalVote)
## Split
twoParty <- filter(subset, Party == "DEMOCRATIC" | Party == "REPUBLICAN")
head(twoParty) ## there are still some categories in the Contest that we are not interested in. Let's get rid of those too.
twoPartySW <- filter(twoParty, Contest == "PRESIDENTIAL ELECTORS" | Contest == "UNITED STATES SENATOR" | Contest == "ATTORNEY GENERAL" | Contest == "AUDITOR GENERAL" | Contest == "STATE TREASURER")
glimpse(twoPartySW)
## Apply: now we create twoParty variable that represents the Democratic percentage share of two-party vote on statewide elections.
Democratic <- filter(twoPartySW, Party == "DEMOCRATIC")
Republican <- filter(twoPartySW, Party == "REPUBLICAN")
twoPartySW <- mutate(Democratic, twoParty = Democratic$Count/(Democratic$Count + Republican$Count))
drop <- c("Party","Count")
twoPartySW <- twoPartySW[,!(names(twoPartySW) %in% drop)] ## remove Party and Count columns for clarity
head(twoPartySW)
president <- filter(subset, Contest == "PRESIDENTIAL ELECTORS")
head(president)
subset %>%
group_by(PrecName) %>%
summarize(president, total = sum(Count))
subset %>%
group_by(PrecName) %>%
summarize(president, Count)
subset %>%
group_by(PrecName) %>%
summarize(president, total = sum(Count))
president %>%
group_by(PrecName) %>%
summarize(president, total = sum(Count))
group_by(PrecName) %>%
summarize(president, total = sum(Count))
summarize(president, total = sum(Count))
president %>% group_by(PrecNo) %>% summarize(president, total = sum(Count))
president %>% group_by(PrecNo) %>% summarize(total = sum(Count))
president %>% group_by(PrecName) %>% summarize(total = sum(Count))
subset %>%
group_by(PrecName) %>%
mutate(subset, rolloff = 100*((1 - Count)/(president$total)))
subset %>%
group_by(PrecName) %>%
group_by(Contest) %>%
mutate(subset, rolloff = 100*((1 - Count)/(president$total)))
subset %>%
group_by(PrecName) %>%
summarize(total = sum(Count))
subset %>%
group_by(Contest) %>%
summarize(total = sum(Count))
subset %>%
group_by(PrecName) %>%
group_by(Contest) %>%
summarize(total = sum(Count))
subset %>%
group_by(PrecName, Contest) %>%
mutate(subset, rolloff = 100*((1 - Count)/(president$total)))
subset %>%
group_by(PrecName, Contest) %>%
mutate(subset, total = sum(Count))
subset %>%
group_by(PrecName, Contest) %>%
mutate(total = sum(Count))
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count))# apply
mutate(rolloff= 100*((1 - Count)/(president$total))
rolloff <-
mutate(rolloff= 100*((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"]))
rolloff <-
rolloff <-
rolloff %>%
mutate(rolloff = 100((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
rolloff <- mutate(rolloff, rolloff = 100((1 - total)/(total[rolloff$Contest == "PRESIDENTIAL ELECTORS"])))
rolloff <- mutate(rolloff, rolloff = 100((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
rolloff <- mutate(rolloff, rolloff = 100*((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
rolloff <-
rolloff %>%
group_by(PrecName, Contest) %>%
mutate(rolloff, rolloff = 100*((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
rolloff <-
rolloff %>%
group_by(Contest) %>%
mutate(rolloff, rolloff = 100*((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
glimpse(rolloff)
head(rolloff)
rolloff <- select(PrecName, Contest, total)
rolloff <- select(rolloff, PrecName, Contest, total)
head(rolloff)
distinct(rolloff) #remove duplicates, split
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
head(rolloff)
distinct(rolloff) #remove duplicates, split
head(rolloff)
rolloff <- distinct(rolloff) #remove duplicates, split
head(rolloff)
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
head(rolloff)
rolloff <- distinct(total, .keep_all = TRUE) #remove duplicates, split
rolloff <- distinct(rolloff$total, .keep_all = TRUE) #remove duplicates, split
rolloff %>%
distinct(total, .keep_all = TRUE) #remove duplicates, split
rolloff <- rolloff %>%
distinct(total, .keep_all = TRUE) #remove duplicates, split
head(rolloff)
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
group_by(Contest)
summarize(total = mean(total)) #remove duplicates, split
rolloff <- rolloff %>%
group_by(Contest)
rolloff <- rolloff %>%
group_by(Contest) %>%
summarize(total = mean(total)) #remove duplicates, split
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
group_by(PrecName, Contest) %>%
summarize(total = mean(total)) #remove duplicates, split
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
group_by(PrecName, Contest) %>%
distinct(total) #remove duplicates, split
head(rolloff) #let's focus on precinct, contest, and total
rolloff <-
rolloff %>%
group_by(PrecName, Contest) %>%
mutate(rolloff, rolloff = 100*((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
rolloff <-
rolloff %>%
group_by(PrecName) %>%
mutate(rolloff, rolloff = 100*((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
rolloff <-
rolloff %>%
group_by(PrecName) %>%
mutate(rolloff = 100*((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
head(rolloff)
total[Contest == "PRESIDENTIAL ELECTORS"]
rolloff$total[rolloff$Contest == "PRESIDENTIAL ELECTORS"]
head(rolloff)
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
group_by(PrecName, Contest) %>%
distinct(total) #remove duplicates, split
head(rolloff)
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
group_by(Contest) %>%
distinct(total)
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
distinct(total)
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
View(rolloff)
rolloff <- select(rolloff, PrecName, Contest, total) #split
View(rolloff)
rolloff <- rolloff %>%
distinct(total) #remove duplicates, split
View(rolloff)
rolloff <-
rolloff %>%
group_by(PrecName) %>%
mutate(rolloff = 100*((1 - total)/(total[Contest == "PRESIDENTIAL ELECTORS"])))
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
distinct(total) #remove duplicates, split
rolloff <-
rolloff %>%
group_by(PrecName) %>%
mutate(rolloff = 100*((1 - (total/(total[Contest == "PRESIDENTIAL ELECTORS"])))))
View(rolloff)
#let's filter our the negative rolloff values
rolloff <- filter(rolloff, Contest != "REGISTERED VOTERS - TOTAL")
View(rolloff)
#let's filter our the negative rolloff values
rolloff <- filter(rolloff, Contest != "REGISTERED VOTERS - TOTAL" & Contest !="BALLOTS CAST - TOTAL"  & Contest !="VOTER TURNOUT - TOTAL")
head(rolloff)
rolloff <- twoPartySW %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
## Split
twoParty <- filter(subset, Party == "DEMOCRATIC" | Party == "REPUBLICAN")
head(twoParty) ## there are still some categories in the Contest that we are not interested in. Let's get rid of those too.
twoPartySW <- filter(twoParty, Contest == "PRESIDENTIAL ELECTORS" | Contest == "UNITED STATES SENATOR" | Contest == "ATTORNEY GENERAL" | Contest == "AUDITOR GENERAL" | Contest == "STATE TREASURER")
glimpse(twoPartySW)
## Apply: now we create twoParty variable that represents the Democratic percentage share of two-party vote on statewide elections.
Democratic <- filter(twoPartySW, Party == "DEMOCRATIC")
Republican <- filter(twoPartySW, Party == "REPUBLICAN")
twoPartySW <- mutate(Democratic, twoParty = Democratic$Count/(Democratic$Count + Republican$Count))
drop <- c("Party","Count")
twoPartyStateWide <- twoPartySW[,!(names(twoPartySW) %in% drop)] ## remove Party and Count columns for clarity
head(twoPartySW)
rolloff <- twoPartySW %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
distinct(total) #remove duplicates, split
rolloff <-
rolloff %>%
group_by(PrecName) %>% #split
mutate(rolloff = 100*((1 - (total/(total[Contest == "PRESIDENTIAL ELECTORS"]))))) #apply
View(rolloff)
rolloff <- subset %>%
group_by(PrecName, Contest) %>% # split
mutate(total = sum(Count)) # apply
head(rolloff) #let's focus on precinct, contest, and total
rolloff <- select(rolloff, PrecName, Contest, total) #split
rolloff <- rolloff %>%
distinct(total) #remove duplicates, split
rolloff <-
rolloff %>%
group_by(PrecName) %>% #split
mutate(rolloff = 100*((1 - (total/(total[Contest == "PRESIDENTIAL ELECTORS"]))))) #apply
#let's filter to only look at state wide elections
rolloff <- filter(rolloff, Contest == "PRESIDENTIAL ELECTORS" | Contest == "UNITED STATES SENATOR" | Contest == "ATTORNEY GENERAL" | Contest == "AUDITOR GENERAL" | Contest == "STATE TREASURER")
head(rolloff)
head(totalvote)
head(totalVote)
head(twoPartyStateWide)
head(rolloff)
head(totalVote)
head(twoPartyStateWide)
head(totalVote)
head(twoPartyStateWide)
head(totalVote)
head(twoPartyStateWide)
head(rolloff)
head(twoPartyStateWide)
full_join(twoPartyStateWide, rolloff, by = "PrecName" & "Contest")
??full_join
full_join(twoPartyStateWide, rolloff, by = c("PrecName" = "Contest"))
full_join(twoPartyStateWide, rolloff, by = "Contest")
rolloffB <- select(rolloff)
bind_cols(twoPartyStateWide, rolloff)
data1 <- select(-c(8:9))
data1 <- data1[,-c(8:9)]
data1 <- data1[,-(8:9)]
data1 <- bind_cols(twoPartyStateWide, rolloff)
data1 <- data1[,-(8:9)]
View(data1)
data1 <- bind_cols(twoPartyStateWide, rolloff)
View(data1)
data1 <- data1[,-(7:8)]
View(data1)
head(totalVote)
totalVote <- select(totalVote, PrecName, Count)
data2 <- lef_join(data1, totalVote, by = "PrecName")
data2 <- left_join(data1, totalVote, by = "PrecName")
View(data2)
head(data2)
data2 %>%
data2[, -6]
data2 <- data2[, -6]
head(data2) #remove total column and rename Count column as totalVote
colnames(data2)[7] <- "totalVote"
head(data2)
write.csv(data2, file="Exercise3.csv")
library(ggmap)
install.packages("ggmap")
install.packages("XML")
install.packages("geosphere")
install.packages("geoname")
install.packages("geonames")
install.packages("Imap")
install.packages("googleway")
user_locations_finalcleaned.Rdata
setwd("~/Box Sync/2018 Spring/SoDA 501/FinalProject")
library(dplyr)
source("~Documents/GitHub/Travel_Patterns_SODA_501/src/00_geo_dist_function.R")
setwd("~/Documents/GitHub/Travel_Patterns_SODA_501/src")
source("~/Documents/GitHub/Travel_Patterns_SODA_501/src/00_geo_dist_function.R")
load("~/Box Sync/2018 Spring/SoDA 501/FinalProject/user_locations_finalcleaned.Rdata")
load("~/Box Sync/2018 Spring/SoDA 501/FinalProject/user_locations_finalcleaned.Rdata")
#I will use the subsetted data here
user_locations <- user_locations_c2
###
### Claire Kelling
### SODA 501
### Final Project
###
### Created 4/9/18 for complication of edgelist
###
library(ggmap)
library(XML)
library(geosphere)
library(geonames)
library(Imap)
library(googleway)
library(xtable)
library(dplyr)
source("~/Documents/GitHub/Travel_Patterns_SODA_501/src/00_geo_dist_function.R")
load("~/Box Sync/2018 Spring/SoDA 501/FinalProject/user_locations_finalcleaned.Rdata")
#I will use the subsetted data here
user_locations <- user_locations_c2
#
# Desired dataframe output: city 1, city 2, number of users, distance
#
towns<-c("Ithaca, NY", "State College, PA", "Bloomington, IN", "Lawrence,
KS", "Blacksburg, VA", "College Station, TX", "Columbia, MO",
"Champaign, IL", "Ann Arbor, MI", "Gainesville, FL")
#creating for loop to go through the dataset
edge_list <- NULL
for(j in 1:nrow(user_locations)){
#j <- 2
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
print(paste(j, "****************************************"))
if(length(user_towns)>1){
for(i in 1:(length(user_towns)-1)){
#i <- 1
new_edge <- c(user_towns[i], user_towns[i+1])
edge_list <- rbind(edge_list, new_edge)
print(i)
}
}
}
edge_list <- as.data.frame(edge_list)
rownames(edge_list) <- c()
colnames(edge_list) <- c("origin", "dest")
#aggregate it to get a count
agg_elist <- edge_list %>% group_by(origin, dest) %>% tally()
agg_elist <- as.data.frame(agg_elist)
agg_elist$origin <- as.character(agg_elist$origin)
agg_elist$dest <- as.character(agg_elist$dest)
#now, to find the location between the two cities
agg_elist$dist <- rep(NA,nrow(agg_elist))
key <- "AIzaSyBx0xrnryLGil3jNbKOkgSTBaHeZGqxLQg"
for(i in 1:length(agg_elist)){
#i=1
towns <- agg_elist[i,1:2]
lonlat1 <- google_geocode(address = towns[1,1], key = key)
lonlat1 <- lonlat1$results$geometry$location
Sys.sleep(runif(1,1,3))
lonlat2 <- google_geocode(address = towns[1,2], key = key)
lonlat2 <- lonlat2$results$geometry$location
lonlat3 <- rbind(lonlat1,lonlat2)
names <- c(towns[1,1], towns[1,2])
print(i)
df.cities <- data.frame(name = names,
lat  = lonlat3$lat,
lon  = lonlat3$lng)
dmat3 <- round(GeoDistanceInMetresMatrix(df.cities) / 1000)
dist_vec <- dmat3[,1]
dist <- dist_vec[2]
agg_elist$dist[i] <- dist
}
###
### Claire Kelling
### SODA 501
### Final Project
###
### Created 4/9/18 for complication of edgelist
###
library(ggmap)
library(XML)
library(geosphere)
library(geonames)
library(Imap)
library(googleway)
library(xtable)
library(dplyr)
source("~/Documents/GitHub/Travel_Patterns_SODA_501/src/00_geo_dist_function.R")
load("~/Box Sync/2018 Spring/SoDA 501/FinalProject/user_locations_finalcleaned.Rdata")
#I will use the subsetted data here
user_locations <- user_locations_c2
#
# Desired dataframe output: city 1, city 2, number of users, distance
#
towns<-c("Ithaca, NY", "State College, PA", "Bloomington, IN", "Lawrence,
KS", "Blacksburg, VA", "College Station, TX", "Columbia, MO",
"Champaign, IL", "Ann Arbor, MI", "Gainesville, FL")
#creating for loop to go through the dataset
edge_list <- NULL
for(j in 1:nrow(user_locations)){
#j <- 2
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
print(paste(j, "****************************************"))
if(length(user_towns)>1){
for(i in 1:(length(user_towns)-1)){
#i <- 1
new_edge <- c(user_towns[i], user_towns[i+1])
edge_list <- rbind(edge_list, new_edge)
print(i)
}
}
}
edge_list <- as.data.frame(edge_list)
rownames(edge_list) <- c()
colnames(edge_list) <- c("origin", "dest")
#aggregate it to get a count
agg_elist <- edge_list %>% group_by(origin, dest) %>% tally()
agg_elist <- as.data.frame(agg_elist)
agg_elist$origin <- as.character(agg_elist$origin)
agg_elist$dest <- as.character(agg_elist$dest)
#now, to find the location between the two cities
agg_elist$dist <- rep(NA,nrow(agg_elist))
key <- "AIzaSyCvZ7gO_UvWMKcm4ZbBbqNvmFJK81aqC04"
for(i in 1:length(agg_elist)){
#i=1
towns <- agg_elist[i,1:2]
lonlat1 <- google_geocode(address = towns[1,1], key = key)
lonlat1 <- lonlat1$results$geometry$location
Sys.sleep(runif(1,1,3))
lonlat2 <- google_geocode(address = towns[1,2], key = key)
lonlat2 <- lonlat2$results$geometry$location
lonlat3 <- rbind(lonlat1,lonlat2)
names <- c(towns[1,1], towns[1,2])
print(i)
df.cities <- data.frame(name = names,
lat  = lonlat3$lat,
lon  = lonlat3$lng)
dmat3 <- round(GeoDistanceInMetresMatrix(df.cities) / 1000)
dist_vec <- dmat3[,1]
dist <- dist_vec[2]
agg_elist$dist[i] <- dist
}
View(agg_elist)
View(user_locations)
