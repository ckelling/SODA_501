###
full_dat <- NULL
for(j in 692:nrow(user_locations)){
#j <- 692
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
if(length(user_towns) < 50){
lonlat3 <- NULL
for(i in 1:length(user_towns)){
#i=1
lonlat2 <- google_geocode(address = user_towns[i], key = key1)
lonlat2 <- lonlat2$results$geometry$location
print(i)
Sys.sleep(runif(1,1,3))
lonlat3 <- rbind(lonlat3, lonlat2)
#print(paste(nrow(lonlat3), "***"))
}
#geocodeQueryCheck()
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
# Now, I will create a distance matrix
#need to get matrix in correct format
df.cities <- data.frame(name = user_towns,
lat  = lonlat3$lat,
lon  = lonlat3$lng)
#this is in km (units)
dmat3 <- round(GeoDistanceInMetresMatrix(df.cities) / 1000)
#record the furthest and the largest distance
dist_vec <- dmat3[,coll_ind]
max_dist <- max(dist_vec) #measured in km
max_loc <- rownames(dmat3)[which(dmat3[,coll_ind] == max_dist)]
#record coll_town
coll_loc <- rownames(dmat3)[coll_ind]
#record the sum of the distances, assuming traveling in a line
dist_vec <- NULL
if(nrow(dmat3) > 1){
for(k in 1:(nrow(dmat3)-1)){
#k=6
dist1 <- dmat3[k,k+1]
dist_vec <- c(dist_vec,dist1)
}
dist_trav <- sum(dist_vec)
}else{
dist_trav <- 0
}
new_dat <- c(coll_loc, num_loc, max_loc, max_dist, dist_trav)
full_dat <- rbind(full_dat, new_dat)
}
}
for(j in 692:nrow(user_locations)){
#j <- 692
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
if(length(user_towns) < 50){
lonlat3 <- NULL
for(i in 1:length(user_towns)){
#i=1
lonlat2 <- google_geocode(address = user_towns[i], key = key2)
lonlat2 <- lonlat2$results$geometry$location
print(i)
Sys.sleep(runif(1,1,3))
lonlat3 <- rbind(lonlat3, lonlat2)
#print(paste(nrow(lonlat3), "***"))
}
#geocodeQueryCheck()
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
# Now, I will create a distance matrix
#need to get matrix in correct format
df.cities <- data.frame(name = user_towns,
lat  = lonlat3$lat,
lon  = lonlat3$lng)
#this is in km (units)
dmat3 <- round(GeoDistanceInMetresMatrix(df.cities) / 1000)
#record the furthest and the largest distance
dist_vec <- dmat3[,coll_ind]
max_dist <- max(dist_vec) #measured in km
max_loc <- rownames(dmat3)[which(dmat3[,coll_ind] == max_dist)]
#record coll_town
coll_loc <- rownames(dmat3)[coll_ind]
#record the sum of the distances, assuming traveling in a line
dist_vec <- NULL
if(nrow(dmat3) > 1){
for(k in 1:(nrow(dmat3)-1)){
#k=6
dist1 <- dmat3[k,k+1]
dist_vec <- c(dist_vec,dist1)
}
dist_trav <- sum(dist_vec)
}else{
dist_trav <- 0
}
new_dat <- c(coll_loc, num_loc, max_loc, max_dist, dist_trav)
full_dat <- rbind(full_dat, new_dat)
}
}
#i=1
lonlat2 <- google_geocode(address = user_towns[i], key = key2)
##
## Now, I would just like to record the indice of the college town,
##  and the total number of unique locations.
##
ind_dat <- NULL
for(j in 1:nrow(user_locations)){
#j <- 24
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
#record coll_town
coll_loc <- rownames(dmat3)[coll_ind]
#create new row
new_dat <- c(coll_loc, num_loc, coll_loc)
#new data
ind_dat <- rbind(ind_dat, new_dat)
}
##
## Now, I would just like to record the indice of the college town,
##  and the total number of unique locations.
##
ind_dat <- NULL
for(j in 1:nrow(user_locations)){
#j <- 24
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
#record coll_town
coll_loc <- rownames(dmat3)[coll_ind]
#create new row
new_dat <- c(coll_loc, num_loc, coll_ind)
#new data
ind_dat <- rbind(ind_dat, new_dat)
}
View(ind_dat)
#j <- 24
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
#record coll_town
coll_loc <- user_towns[coll_ind]
##
## Now, I would just like to record the indice of the college town,
##  and the total number of unique locations.
##
ind_dat <- NULL
for(j in 1:nrow(user_locations)){
#j <- 24
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
#record coll_town
coll_loc <- user_towns[coll_ind]
#create new row
new_dat <- c(coll_loc, num_loc, coll_ind)
#new data
ind_dat <- rbind(ind_dat, new_dat)
}
j <- 170
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
#record coll_town
coll_loc <- user_towns[coll_ind]
#create new row
new_dat <- c(coll_loc, num_loc, coll_ind)
j <- 168
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
k <- 0
##
## Now, I would just like to record the indice of the college town,
##  and the total number of unique locations.
##
ind_dat <- NULL
k <- 0
for(j in 1:nrow(user_locations)){
j <- 168
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
if(length(coll_ind)> 1){
coll_ind <- coll_ind[1]
k <- k+1
}
#record coll_town
coll_loc <- user_towns[coll_ind]
#create new row
new_dat <- c(coll_loc, num_loc, coll_ind)
#new data
ind_dat <- rbind(ind_dat, new_dat)
}
##
## Now, I would just like to record the indice of the college town,
##  and the total number of unique locations.
##
ind_dat <- NULL
k <- 0
for(j in 1:nrow(user_locations)){
#j <- 168
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
if(length(coll_ind)> 1){
coll_ind <- coll_ind[1]
k <- k+1
}
#record coll_town
coll_loc <- user_towns[coll_ind]
#create new row
new_dat <- c(coll_loc, num_loc, coll_ind)
#new data
ind_dat <- rbind(ind_dat, new_dat)
}
k
#There are 2 users that are in more than one college town
#We just take the first location for these two users
ind_dat <- as.data.frame(ind_dat)
colnames(ind_dat) <- c("coll_loc", "num_loc", "coll_ind")
rownames(ind_dat) <- c()
ind_dat$num_loc <- as.numeric(as.character(ind_dat$num_loc))
ind_dat$coll_ind <- as.numeric(as.character(ind_dat$coll_ind))
View(ind_dat)
hist(ind_dat$num_loc)
hist(ind_dat$coll_ind)
View(ind_dat)
p <- ggplot(ind_dat, aes(coll_loc, num_loc))
p + geom_boxplot()
p2 <- ggplot(ind_dat, aes(coll_loc, coll_ind))
p2 + geom_boxplot()
#aggregating by the college town
coll_ind_summ <- aggregate(. ~ coll_loc, ind_dat[-2], mean)
xtable(coll_ind_summ)
#aggregating by the college town
coll_ind_summ <- aggregate(. ~ coll_loc, mean)
#aggregating by the college town
coll_ind_summ <- aggregate(. ~ coll_loc, ind_dat, mean)
xtable(coll_ind_summ)
View(coll_ind_summ)
length(which(ind_dat$num_loc==1))
length(which(ind_dat$num_loc==1))/nrow(ind_dat)
#performing the same analysis for users that have traveled to more than one location
g1_ind_dat <- ind_dat[which(ind_dat$num_loc>1),]
hist(g1_ind_dat$num_loc)
hist(g1_ind_dat$coll_ind)
p <- ggplot(g1_ind_dat, aes(coll_loc, num_loc))
p + geom_boxplot()
p2 <- ggplot(g1_ind_dat, aes(coll_loc, coll_ind))
p2 + geom_boxplot()
coll_ind_g1 <- aggregate(. ~ coll_loc, g1_ind_dat, mean)
xtable(coll_ind_summ)
View(coll_ind_g1)
g1_ind_dat$perc_ind <- g1_ind_dat$coll_ind/g1_ind_dat$num_loc
g1_ind_dat$perc_ind <- g1_ind_dat$coll_ind/g1_ind_dat$num_loc
hist(g1_ind_dat$perc_ind)
View(g1_ind_dat)
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram()
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind, binwidth=50)) + geom_histogram()
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(binwidth=50)
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=20)
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=10)
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=10)+geom_label(x="Collge Percent of Travel")
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=10)+geom_label(xlab="Collge Percent of Travel")
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=10)+label(xlab="Collge Percent of Travel")
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=10)+labs(x="Collge Percent of Travel")
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=10)+labs(x="College Percent of Travel")
g1_ind_dat$perc_ind <- (g1_ind_dat$coll_ind-1)/g1_ind_dat$num_loc
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=10)+labs(x="College Percent of Travel")
coll_ind_g1 <- aggregate(. ~ coll_loc, g1_ind_dat, mean)
xtable(coll_ind_summ)
coll_ind_g1 <- aggregate(. ~ coll_loc, g1_ind_dat, mean)
xtable(coll_ind_summ)
xtable(coll_ind_g1)
save(full_dat_final, file = "C:/Users/ckell/OneDrive/Penn State/2017-2018/01_Spring/SODA_501/SODA_501_project/data/coll_ind_dat.Rdata")
###
### Now I will operationalize for the full dataset
###
full_dat <- NULL
for(j in 692:nrow(user_locations)){
#j <- 692
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
if(length(user_towns) < 50){
lonlat3 <- NULL
for(i in 1:length(user_towns)){
#i=1
lonlat2 <- google_geocode(address = user_towns[i], key = key2)
lonlat2 <- lonlat2$results$geometry$location
print(i)
Sys.sleep(runif(1,1,3))
lonlat3 <- rbind(lonlat3, lonlat2)
#print(paste(nrow(lonlat3), "***"))
}
#geocodeQueryCheck()
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
# Now, I will create a distance matrix
#need to get matrix in correct format
df.cities <- data.frame(name = user_towns,
lat  = lonlat3$lat,
lon  = lonlat3$lng)
#this is in km (units)
dmat3 <- round(GeoDistanceInMetresMatrix(df.cities) / 1000)
#record the furthest and the largest distance
dist_vec <- dmat3[,coll_ind]
max_dist <- max(dist_vec) #measured in km
max_loc <- rownames(dmat3)[which(dmat3[,coll_ind] == max_dist)]
#record coll_town
coll_loc <- rownames(dmat3)[coll_ind]
#record the sum of the distances, assuming traveling in a line
dist_vec <- NULL
if(nrow(dmat3) > 1){
for(k in 1:(nrow(dmat3)-1)){
#k=6
dist1 <- dmat3[k,k+1]
dist_vec <- c(dist_vec,dist1)
}
dist_trav <- sum(dist_vec)
}else{
dist_trav <- 0
}
new_dat <- c(coll_loc, num_loc, max_loc, max_dist, dist_trav)
full_dat <- rbind(full_dat, new_dat)
}
}
j <- 693
user_towns <- user_locations$locations[[j]]
#remove NA's
user_towns <- user_towns[!is.na(user_towns)]
num_loc <- length(user_towns)
print(paste(j, "****************************************"))
if(length(user_towns) < 50){
lonlat3 <- NULL
for(i in 1:length(user_towns)){
#i=1
lonlat2 <- google_geocode(address = user_towns[i], key = key2)
lonlat2 <- lonlat2$results$geometry$location
print(i)
Sys.sleep(runif(1,1,3))
lonlat3 <- rbind(lonlat3, lonlat2)
#print(paste(nrow(lonlat3), "***"))
}
#geocodeQueryCheck()
#record indice that is college town
coll_ind <- which(user_towns %in% towns)
# Now, I will create a distance matrix
#need to get matrix in correct format
df.cities <- data.frame(name = user_towns,
lat  = lonlat3$lat,
lon  = lonlat3$lng)
#this is in km (units)
dmat3 <- round(GeoDistanceInMetresMatrix(df.cities) / 1000)
#record the furthest and the largest distance
dist_vec <- dmat3[,coll_ind]
max_dist <- max(dist_vec) #measured in km
max_loc <- rownames(dmat3)[which(dmat3[,coll_ind] == max_dist)]
#record coll_town
coll_loc <- rownames(dmat3)[coll_ind]
#record the sum of the distances, assuming traveling in a line
dist_vec <- NULL
if(nrow(dmat3) > 1){
for(k in 1:(nrow(dmat3)-1)){
#k=6
dist1 <- dmat3[k,k+1]
dist_vec <- c(dist_vec,dist1)
}
dist_trav <- sum(dist_vec)
}else{
dist_trav <- 0
}
new_dat <- c(coll_loc, num_loc, max_loc, max_dist, dist_trav)
full_dat <- rbind(full_dat, new_dat)
}
lonlat3 <- NULL
for(i in 1:length(user_towns)){
#i=1
lonlat2 <- google_geocode(address = user_towns[i], key = key2)
lonlat2 <- lonlat2$results$geometry$location
print(i)
Sys.sleep(runif(1,1,3))
lonlat3 <- rbind(lonlat3, lonlat2)
#print(paste(nrow(lonlat3), "***"))
}
#i=1
lonlat2 <- google_geocode(address = user_towns[i], key = key2)
View(lonlat2)
g1_ind_dat$perc_ind <- (g1_ind_dat$coll_ind-1)/(g1_ind_dat$num_loc-1)
hist(g1_ind_dat$num_loc)
hist(g1_ind_dat$coll_ind)
hist(g1_ind_dat$perc_ind)
ggplot(data=g1_ind_dat, aes(g1_ind_dat$perc_ind)) + geom_histogram(bins=10)+labs(x="College Percent of Travel")
v <- ggplot(coll_ind_g1, aes(num_loc, coll_ind, z = density))
v + geom_contour()
View(coll_ind_g1)
v <- ggplot(g1_ind_dat, aes(num_loc, coll_ind, z = density))
v + geom_contour()
data("faithfuld")
v <- ggplot(faithfuld, aes(waiting, eruptions, z = density))
v + geom_contour()
v <- ggplot(g1_ind_dat, aes(num_loc, coll_ind,))
v + geom_density_2d()
v <- ggplot(g1_ind_dat, aes(num_loc, perc_ind,))
v <- ggplot(g1_ind_dat, aes(num_loc, perc_ind))
v + geom_density_2d()
v + geom_density_2d(binwidth=0.01)
v + geom_density_2d(binwidth=1)
v + geom_density_2d(binwidth=0.05)
v + geom_density_2d(binwidth=0.01)
v + geom_density_2d(binwidth=0.03)
v + geom_density_2d(binwidth=0.03)+ geom_raster(aes(fill = density))
faithfuld$dens2 <- density(faithfuld$waiting)
View(faithfuld)
test <- density(g1_ind_dat)
d <- ggplot(g1_ind_dat, aes(num_loc, perc_ind))
d + stat_density_2d(geom = "raster", aes(fill = ..density..), contour = FALSE)
d <- ggplot(g1_ind_dat[which(g1_ind_dat$num_loc<5),], aes(num_loc, perc_ind))
d + stat_density_2d(geom = "raster", aes(fill = ..density..), contour = FALSE)
d + stat_density_2d(geom = "point", aes(size = ..density..), n = 20, contour = FALSE)
View(g1_ind_dat)
agg_dat <- g1_ind_dat %>% group_by(num_loc,coll_ind) %>% tally()
View(agg_dat)
agg_dat_num_loc <- g1_ind_dat %>% group_by(num_loc) %>% tally()
View(agg_dat_num_loc)
View(agg_dat)
agg_dat2 <- left_join(agg_dat, agg_dat_num_loc)
View(agg_dat2)
colnames(agg_dat_num_loc) <-c("num_loc", "n_2")
agg_dat2 <- left_join(agg_dat, agg_dat_num_loc)
agg_dat <- left_join(agg_dat, agg_dat_num_loc)
agg_dat$perc <- agg_dat$n/agg_dat$n_2
agg_dat$coll_perc <- agg_dat$coll_ind/agg_dat$num_loc
agg_dat$coll_perc <- (agg_dat$coll_ind-1)/(agg_dat$num_loc-1)
v <- ggplot(agg_dat, aes(num_loc, coll_perc, z = perc))
v + geom_contour()
v <- ggplot(agg_dat, aes(num_loc, coll_perc, size = perc))
v + geom_point()
agg_dat <- g1_ind_dat %>% group_by(coll_loc,num_loc,coll_ind) %>% tally()
agg_dat_num_loc <- g1_ind_dat %>% group_by(num_loc) %>% tally()
colnames(agg_dat_num_loc) <-c("num_loc", "n_2")
agg_dat <- left_join(agg_dat, agg_dat_num_loc)
agg_dat$perc <- agg_dat$n/agg_dat$n_2
agg_dat$coll_perc <- (agg_dat$coll_ind-1)/(agg_dat$num_loc-1)
v <- ggplot(agg_dat, aes(num_loc, coll_perc, size = perc))
v + geom_point()+facet_wrap(~ coll_loc, ncol = 3)
View(g1_ind_dat)
View(agg_dat)
agg_dat <- g1_ind_dat %>% group_by(coll_loc,num_loc,coll_ind) %>% tally()
agg_dat_num_loc <- g1_ind_dat %>% group_by(coll_loc, num_loc) %>% tally()
colnames(agg_dat_num_loc) <-c("num_loc", "n_2")
agg_dat <- left_join(agg_dat, agg_dat_num_loc)
agg_dat$perc <- agg_dat$n/agg_dat$n_2
agg_dat$coll_perc <- (agg_dat$coll_ind-1)/(agg_dat$num_loc-1)
agg_dat <- g1_ind_dat %>% group_by(coll_loc,num_loc,coll_ind) %>% tally()
agg_dat_num_loc <- g1_ind_dat %>% group_by(coll_loc, num_loc) %>% tally()
class(agg_dat$num_loc)
class(agg_dat_num_loc$num_loc)
colnames(agg_dat_num_loc) <-c("num_loc", "n_2")
class(agg_dat_num_loc$num_loc)
agg_dat_num_loc <- g1_ind_dat %>% group_by(coll_loc, num_loc) %>% tally()
colnames(agg_dat_num_loc) <-c("c_town","num_loc", "n_2")
colnames(agg_dat_num_loc) <-c("coll_loc","num_loc", "n_2")
agg_dat_num_loc$num_loc <- as.numeric(as.character(agg_dat_num_loc$num_loc))
agg_dat <- left_join(agg_dat, agg_dat_num_loc)
agg_dat <- g1_ind_dat %>% group_by(coll_loc,num_loc,coll_ind) %>% tally()
agg_dat_num_loc <- g1_ind_dat %>% group_by(coll_loc, num_loc) %>% tally()
colnames(agg_dat_num_loc) <-c("coll_loc","num_loc", "n_2")
agg_dat <- left_join(agg_dat, agg_dat_num_loc)
agg_dat$perc <- agg_dat$n/agg_dat$n_2
agg_dat$coll_perc <- (agg_dat$coll_ind-1)/(agg_dat$num_loc-1)
v <- ggplot(agg_dat, aes(num_loc, coll_perc, size = perc))
v + geom_point()+facet_wrap(~ coll_loc, ncol = 3)
v + geom_point()+facet_wrap(~ coll_loc, ncol = 3)+labs(y="Trip Progress", x= "Number of locations", size = "test")
v + geom_point()+facet_wrap(~ coll_loc, ncol = 3)+labs(y="Trip Progress",
x= "Number of locations",
size = "Relative Frequency")
